// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ud9JpUD8N987dWHx7H9cnr
// Component: lREuFFfurx
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_airdrop.module.css"; // plasmic-import: ud9JpUD8N987dWHx7H9cnr/projectcss
import sty from "./PlasmicTableRow.module.css"; // plasmic-import: lREuFFfurx/css

export const PlasmicTableRow__VariantProps = new Array("header");

export const PlasmicTableRow__ArgProps = new Array("id", "address");

function PlasmicTableRow__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootheader]: hasVariant(variants, "header", "header") }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__limSq)}>
        {p.renderPlasmicSlot({
          defaultContents: "#",
          value: args.id,
          className: classNames(sty.slotTargetId)
        })}
      </div>

      <div
        className={classNames(projectcss.all, sty.freeBox__rduci, {
          [sty.freeBoxheader__rducimiMaN]: hasVariant(
            variants,
            "header",
            "header"
          )
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Address",
          value: args.address,
          className: classNames(sty.slotTargetAddress)
        })}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTableRow__ArgProps,
      internalVariantPropNames: PlasmicTableRow__VariantProps
    });

    return PlasmicTableRow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTableRow";
  } else {
    func.displayName = `PlasmicTableRow.${nodeName}`;
  }
  return func;
}

export const PlasmicTableRow = Object.assign(
  // Top-level PlasmicTableRow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicTableRow
    internalVariantProps: PlasmicTableRow__VariantProps,
    internalArgProps: PlasmicTableRow__ArgProps
  }
);

export default PlasmicTableRow;
/* prettier-ignore-end */
