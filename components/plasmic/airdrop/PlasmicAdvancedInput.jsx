// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ud9JpUD8N987dWHx7H9cnr
// Component: CjanQ98557
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: QvnJ1wWMq8/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_airdrop.module.css"; // plasmic-import: ud9JpUD8N987dWHx7H9cnr/projectcss
import sty from "./PlasmicAdvancedInput.module.css"; // plasmic-import: CjanQ98557/css

export const PlasmicAdvancedInput__VariantProps = new Array("error", "success");

export const PlasmicAdvancedInput__ArgProps = new Array(
  "message",
  "onClick",
  "onSubmit",
  "value",
  "onChange",
  "onLeave"
);

function PlasmicAdvancedInput__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rooterror]: hasVariant(variants, "error", "error"),
          [sty.rootsuccess]: hasVariant(variants, "success", "success")
        }
      )}
    >
      <label
        data-plasmic-name={"label"}
        data-plasmic-override={overrides.label}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.label)}
        for={""}
      >
        {"End a lottery Address"}
      </label>

      <div className={classNames(projectcss.all, sty.freeBox__zip5U)}>
        {(
          hasVariant(variants, "success", "success")
            ? true
            : hasVariant(variants, "error", "error")
            ? true
            : true
        ) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__yKb3, {
              [sty.freeBoxerror__yKb3QTtDl]: hasVariant(
                variants,
                "error",
                "error"
              ),

              [sty.freeBoxsuccess__yKb3JeSbP]: hasVariant(
                variants,
                "success",
                "success"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Success!",
              value: args.message,
              className: classNames(sty.slotTargetMessage, {
                [sty.slotTargetMessageerror]: hasVariant(
                  variants,
                  "error",
                  "error"
                ),

                [sty.slotTargetMessagesuccess]: hasVariant(
                  variants,
                  "success",
                  "success"
                )
              })
            })}
          </div>
        ) : null}

        <input
          data-plasmic-name={"textInput"}
          data-plasmic-override={overrides.textInput ?? overrides.textbox}
          className={classNames(
            projectcss.all,
            projectcss.input,
            sty.textInput
          )}
          onBlur={args.onLeave}
          onChange={args.onChange !== undefined ? args.onChange : ""}
          placeholder={"0xa1b2c3..."}
          size={1}
          type={"text"}
          value={args.value !== undefined ? args.value : ""}
        />

        <Button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames("__wab_instance", sty.button)}
          onClick={args.onClick !== undefined ? args.onClick : ""}
        />
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "label", "textInput", "textbox", "button"],
  label: ["label"],
  textInput: ["textInput", "textbox"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAdvancedInput__ArgProps,
      internalVariantPropNames: PlasmicAdvancedInput__VariantProps
    });

    return PlasmicAdvancedInput__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdvancedInput";
  } else {
    func.displayName = `PlasmicAdvancedInput.${nodeName}`;
  }
  return func;
}

export const PlasmicAdvancedInput = Object.assign(
  // Top-level PlasmicAdvancedInput renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    label: makeNodeComponent("label"),
    textInput: makeNodeComponent("textInput"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicAdvancedInput
    internalVariantProps: PlasmicAdvancedInput__VariantProps,
    internalArgProps: PlasmicAdvancedInput__ArgProps
  }
);

export default PlasmicAdvancedInput;
/* prettier-ignore-end */
