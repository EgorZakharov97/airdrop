// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ud9JpUD8N987dWHx7H9cnr
// Component: 8tGQscQ3JT
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ButtonLink from "../../ButtonLink"; // plasmic-import: yJlgIVbQgj/component
import Tilt from "@plasmicpkgs/react-parallax-tilt"; // plasmic-import: PfY466VIuq/codeComponent
import { useScreenVariants as useScreenVariantsi8XEoDvLpFaqh } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: i8XEoDVLpFaqh/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_airdrop.module.css"; // plasmic-import: ud9JpUD8N987dWHx7H9cnr/projectcss
import sty from "./PlasmicHeroBlock.module.css"; // plasmic-import: 8tGQscQ3JT/css

export const PlasmicHeroBlock__VariantProps = new Array("reverse");

export const PlasmicHeroBlock__ArgProps = new Array("heading", "text", "image");

function PlasmicHeroBlock__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsi8XEoDvLpFaqh()
  });

  return true ? (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootreverse]: hasVariant(variants, "reverse", "reverse") }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__wF1N)}>
        <div className={classNames(projectcss.all, sty.freeBox__wId4D)}>
          <h3
            data-plasmic-name={"h3"}
            data-plasmic-override={overrides.h3}
            className={classNames(projectcss.all, projectcss.h3, sty.h3)}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Creators",
              value: args.heading
            })}
          </h3>

          <div className={classNames(projectcss.all, sty.freeBox__k3JUu)}>
            {p.renderPlasmicSlot({
              defaultContents:
                "Mint thousands of NFTs on OpenSea or any other platform and transfer your tokens to hundreds of different addresses.",
              value: args.text
            })}
          </div>
        </div>

        <ButtonLink
          data-plasmic-name={"toTheApp"}
          data-plasmic-override={overrides.toTheApp}
          className={classNames("__wab_instance", sty.toTheApp)}
          link={"/app/airdrop"}
          text={"Explore"}
        />
      </div>

      <div className={classNames(projectcss.all, sty.freeBox___6Y1F)}>
        <Tilt
          data-plasmic-name={"tilt"}
          data-plasmic-override={overrides.tilt}
          className={classNames("__wab_instance", sty.tilt)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img___8R6VF)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/airdrop/images/bbMeditationpng.png",
                  fullWidth: 3000,
                  fullHeight: 3000,
                  aspectRatio: undefined
                }}
              />
            ),

            value: args.image
          })}
        </Tilt>
      </div>
    </div>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root", "h3", "toTheApp", "tilt"],
  h3: ["h3"],
  toTheApp: ["toTheApp"],
  tilt: ["tilt"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeroBlock__ArgProps,
      internalVariantPropNames: PlasmicHeroBlock__VariantProps
    });

    return PlasmicHeroBlock__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeroBlock";
  } else {
    func.displayName = `PlasmicHeroBlock.${nodeName}`;
  }
  return func;
}

export const PlasmicHeroBlock = Object.assign(
  // Top-level PlasmicHeroBlock renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h3: makeNodeComponent("h3"),
    toTheApp: makeNodeComponent("toTheApp"),
    tilt: makeNodeComponent("tilt"),
    // Metadata about props expected for PlasmicHeroBlock
    internalVariantProps: PlasmicHeroBlock__VariantProps,
    internalArgProps: PlasmicHeroBlock__ArgProps
  }
);

export default PlasmicHeroBlock;
/* prettier-ignore-end */
