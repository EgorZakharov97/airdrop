// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ud9JpUD8N987dWHx7H9cnr
// Component: 2nav5dc2AV
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_airdrop.module.css"; // plasmic-import: ud9JpUD8N987dWHx7H9cnr/projectcss
import sty from "./PlasmicEnterAddresses.module.css"; // plasmic-import: 2nav5dc2AV/css

export const PlasmicEnterAddresses__VariantProps = new Array("error");

export const PlasmicEnterAddresses__ArgProps = new Array(
  "addresses",
  "value",
  "onSubmit",
  "message"
);

function PlasmicEnterAddresses__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rooterror]: hasVariant(variants, "error", "error") }
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__p4H8K
        )}
      >
        {"Enter Your participants here"}
      </div>

      <textarea
        data-plasmic-name={"textarea"}
        data-plasmic-override={overrides.textarea}
        className={classNames(
          projectcss.all,
          projectcss.textarea,
          sty.textarea
        )}
        placeholder={"0xa12b3c..."}
        rows={8}
        value={args.value}
      />

      <button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames(projectcss.all, projectcss.button, sty.button, {
          [sty.buttonerror]: hasVariant(variants, "error", "error")
        })}
        onClick={args.onSubmit}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__bSltq
          )}
        >
          {"Analyze Addresses"}
        </div>

        {(hasVariant(variants, "error", "error") ? true : true) ? (
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox, {
              [sty.freeBoxerror]: hasVariant(variants, "error", "error")
            })}
          >
            {true
              ? p.renderPlasmicSlot({
                  defaultContents: "Sore Error just happened",
                  value: args.message,
                  className: classNames(sty.slotTargetMessage)
                })
              : null}
          </div>
        ) : null}
      </button>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "textarea", "button", "freeBox"],
  textarea: ["textarea"],
  button: ["button", "freeBox"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicEnterAddresses__ArgProps,
      internalVariantPropNames: PlasmicEnterAddresses__VariantProps
    });

    return PlasmicEnterAddresses__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEnterAddresses";
  } else {
    func.displayName = `PlasmicEnterAddresses.${nodeName}`;
  }
  return func;
}

export const PlasmicEnterAddresses = Object.assign(
  // Top-level PlasmicEnterAddresses renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textarea: makeNodeComponent("textarea"),
    button: makeNodeComponent("button"),
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicEnterAddresses
    internalVariantProps: PlasmicEnterAddresses__VariantProps,
    internalArgProps: PlasmicEnterAddresses__ArgProps
  }
);

export default PlasmicEnterAddresses;
/* prettier-ignore-end */
