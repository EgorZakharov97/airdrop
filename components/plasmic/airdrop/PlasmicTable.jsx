// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ud9JpUD8N987dWHx7H9cnr
// Component: -yYhpojB9R
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import TableRow from "../../TableRow"; // plasmic-import: lREuFFfurx/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_airdrop.module.css"; // plasmic-import: ud9JpUD8N987dWHx7H9cnr/projectcss
import sty from "./PlasmicTable.module.css"; // plasmic-import: -yYhpojB9R/css

export const PlasmicTable__VariantProps = new Array();

export const PlasmicTable__ArgProps = new Array("rows", "message");

function PlasmicTable__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <h3
        data-plasmic-name={"h3"}
        data-plasmic-override={overrides.h3}
        className={classNames(
          projectcss.all,
          projectcss.h3,
          projectcss.__wab_text,
          sty.h3
        )}
      >
        {"Let's verify You data"}
      </h3>

      <TableRow
        data-plasmic-name={"tableRow"}
        data-plasmic-override={overrides.tableRow}
        className={classNames("__wab_instance", sty.tableRow)}
        header={true}
      />

      <div className={classNames(projectcss.all, sty.freeBox__lu6IA)}>
        {p.renderPlasmicSlot({
          defaultContents: null,
          value: args.rows
        })}
      </div>

      <button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames(projectcss.all, projectcss.button, sty.button)}
        disabled={false}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {"Create IPFS Table"}
        </div>

        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__hVhVc)}>
            {true
              ? p.renderPlasmicSlot({
                  defaultContents: "Sore Error just happened",
                  value: args.message,
                  className: classNames(sty.slotTargetMessage)
                })
              : null}
          </div>
        ) : null}
      </button>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "h3", "tableRow", "button", "text"],
  h3: ["h3"],
  tableRow: ["tableRow"],
  button: ["button", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTable__ArgProps,
      internalVariantPropNames: PlasmicTable__VariantProps
    });

    return PlasmicTable__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTable";
  } else {
    func.displayName = `PlasmicTable.${nodeName}`;
  }
  return func;
}

export const PlasmicTable = Object.assign(
  // Top-level PlasmicTable renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h3: makeNodeComponent("h3"),
    tableRow: makeNodeComponent("tableRow"),
    button: makeNodeComponent("button"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicTable
    internalVariantProps: PlasmicTable__VariantProps,
    internalArgProps: PlasmicTable__ArgProps
  }
);

export default PlasmicTable;
/* prettier-ignore-end */
