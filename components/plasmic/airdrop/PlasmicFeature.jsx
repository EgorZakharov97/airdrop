// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ud9JpUD8N987dWHx7H9cnr
// Component: zWiclsueNN
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_airdrop.module.css"; // plasmic-import: ud9JpUD8N987dWHx7H9cnr/projectcss
import sty from "./PlasmicFeature.module.css"; // plasmic-import: zWiclsueNN/css

export const PlasmicFeature__VariantProps = new Array();

export const PlasmicFeature__ArgProps = new Array("text", "image");

function PlasmicFeature__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <h3
        data-plasmic-name={"h3"}
        data-plasmic-override={overrides.h3}
        className={classNames(projectcss.all, projectcss.h3, sty.h3)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Designed for Ethereum-Compatible Networks",
          value: args.text,
          className: classNames(sty.slotTargetText)
        })}
      </h3>

      {p.renderPlasmicSlot({
        defaultContents: (
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__nYqdd)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            loading={"lazy"}
            src={{
              src: "/plasmic/airdrop/images/blockchainpng2.png",
              fullWidth: 600,
              fullHeight: 479,
              aspectRatio: undefined
            }}
          />
        ),

        value: args.image
      })}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "h3"],
  h3: ["h3"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFeature__ArgProps,
      internalVariantPropNames: PlasmicFeature__VariantProps
    });

    return PlasmicFeature__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFeature";
  } else {
    func.displayName = `PlasmicFeature.${nodeName}`;
  }
  return func;
}

export const PlasmicFeature = Object.assign(
  // Top-level PlasmicFeature renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h3: makeNodeComponent("h3"),
    // Metadata about props expected for PlasmicFeature
    internalVariantProps: PlasmicFeature__VariantProps,
    internalArgProps: PlasmicFeature__ArgProps
  }
);

export default PlasmicFeature;
/* prettier-ignore-end */
