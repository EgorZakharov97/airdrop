// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ud9JpUD8N987dWHx7H9cnr
// Component: yJlgIVbQgj
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_airdrop.module.css"; // plasmic-import: ud9JpUD8N987dWHx7H9cnr/projectcss
import sty from "./PlasmicButtonLink.module.css"; // plasmic-import: yJlgIVbQgj/css
import ArrowRightIcon from "./icons/PlasmicIcon__ArrowRight"; // plasmic-import: qEXmL2wmwBK/icon

export const PlasmicButtonLink__VariantProps = new Array();

export const PlasmicButtonLink__ArgProps = new Array("text", "link");

function PlasmicButtonLink__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.PlasmicLink
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(projectcss.all, projectcss.a, sty.link)}
        component={Link}
        href={args.link}
        platform={"nextjs"}
      >
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Explore",
            value: args.text,
            className: classNames(sty.slotTargetText)
          })}
        </div>

        <ArrowRightIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg)}
          role={"img"}
        />
      </p.PlasmicLink>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "link", "freeBox", "svg"],
  link: ["link", "freeBox", "svg"],
  freeBox: ["freeBox"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButtonLink__ArgProps,
      internalVariantPropNames: PlasmicButtonLink__VariantProps
    });

    return PlasmicButtonLink__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButtonLink";
  } else {
    func.displayName = `PlasmicButtonLink.${nodeName}`;
  }
  return func;
}

export const PlasmicButtonLink = Object.assign(
  // Top-level PlasmicButtonLink renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    freeBox: makeNodeComponent("freeBox"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicButtonLink
    internalVariantProps: PlasmicButtonLink__VariantProps,
    internalArgProps: PlasmicButtonLink__ArgProps
  }
);

export default PlasmicButtonLink;
/* prettier-ignore-end */
